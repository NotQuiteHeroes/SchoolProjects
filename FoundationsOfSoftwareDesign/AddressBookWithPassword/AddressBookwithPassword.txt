PseudoCode:
#Paige Eckstein
#9/13/2015
#This program asks the user to input data into an address book, search for a name in the address book, #print the entire address book, sort the address book, and then save the data to be loaded for the next use.
Constant Integer SIZE = 100
Declare String names[SIZE]
Declare String addresses[SIZE]
Declare Integer numbers[SIZE]

Module main():
     password()
     loadData()
     Declare String endProgram
     menuOutput()
     Display “Would you like to quit?”
     Input endProgram
     If endProgram == “yes”:
          saveData()
     End If

Module password():
     Constant String PASSWORD = “H3110W0r1d”
     Declare String tempPass
     Declare String char1
     Declare String char2
     Declare Integer index = 0
     Display “Please enter the password: “
     Input tempPass
     If length(tempPass) > length(PASSWORD):
          Display “Wrong password. “
          main()
     Else
          Set char1 = tempPass[index]
          Set char2 = PASSWORD[index]
          For each char in tempPass
               If char1 != char2
                    Display “Wrong password.“
                    main()
               Else:
                    Set index = index + 1
               End If
          End For
     End If
     
Module menuOutput():
     Display “a. Enter Information\n b. Search \n c. Print all\n d. Sort”
     menuInput()
Function menuInput():
     Declare String answer
     Display “Please choose one: “
     Input answer
     menuLogic(answer)
     

Module menuLogic(String answer):
     If answer == “a” Then
          record()
     Else if answer == “b” Then
          search()
     Else if answer == “c” Then
          printAll()
     Else if answer == “d” Then
          sort()
     Else
          Display “I’m sorry, please type ‘a’, ‘b’, ‘c’, or ‘d’”
          menuOutput()
     End If

Module loadData(Integer SIZE, String names[], String addresses[], Integer numbers[]):
     Declare Integer index = 0
     Declare String name, address
     Declare Integer number
     Declare InputFile addressBook
     Open addressBook “addressBook.csv”
     While (index <= SIZE -1) and (NOT(eof(addressBook))):
          Set name = names[index]
          Set address = addresses[index]
          Set number = numbers[index]
          Read addressBook name, address, number
          Set index = index + 1
     End While
     Close addressBook
Module record(Integer SIZE, String Ref names[], String Ref addresses[], Integer Ref numbers[]):
     Declare Boolean full 
     While full == False
          getInput()
     End While

Module getInput(Integer SIZE, String Ref names[], String Ref addresses[], Integer Ref numbers[]):
     Declare Integer index = 0
     Declare String name, address
     Declare Integer number
     Display “Please enter a name: “:
     Input name
     If isString(name) == False:
          Display “I’m sorry, that is an invalid type. Please enter a name: “
          Input name
     End If
     Set names[index] = name
     Display “Please enter an address: “
     Input address
     If isString(address) == False:
          Display “I’m sorry, that is an invalid type. Please enter an address: “
          Input address
     End If
     Set addresses[index] = address
     Display “Please enter a phone number: “
     Input number
     If isDigit(number) == False:
          Display “I’m sorry, that is an invalid type. Please enter a number: “
          Input number
     End If
     Set numbers[index] = number
     Set index = index + 1
     If index > SIZE – 1 
          Display “Cannot store, address book full.”
          Set full = True
     End If
     Return full
     
Module search(Integer SIZE, String Ref names[], String addresses[], Integer numbers[]):
     Declare String searchTerm
     Declare Integer first = 0
     Declare Integer last = SIZE – 1
     Declare Integer position = -1
     Declare Bool found = False
     Declare Integer middle, index, scan, unsorted
     Declare 
     Display “Please enter a name to search for: “
     Input searchTerm
     For index = 1 to SIZE – 1:
               set unsorted =  names[index]
               set scan = index
               While scan > 0 AND names[scan – 1] > unsorted:
                    Set names[scan] = names[scan-1]
                    Set scan = scan – 1
               End While
               Set names[scan] = unsorted
          End For
     While(NOT found) and (first <= last):
          Set middle = (first + last)/2
          If names[middle] == searchTerm Then:
               Set found = True
               Set position = middle
               Display setWidth(25) +  names[middle]  + setWidth(100) + addresses[middle] +  setWidth(15) +    numbers[middle]
          Else If names[middle] > searchTerm Then:
               Set last = middle – 1
          Else:
               Set first = middle + 1
          End If
     End While
     
Module printAll(Integer SIZE, String names[], String addresses[], Integer numbers[]):
     Declare Integer index = 0
     While index < SIZE – 1
          Display setWidth(25) + names[index] + setWidth(100) + addresses[index] + setWidth(15) + numbers[index]
          index = index + 1
     End While

Module String Sort(Integer SIZE, string Ref names[]):
     Display “Please choose ascending or descending: “
     Input sortType
     Declare Integer Index
     Declare Integer scan
     Declare Integer unsorted
     If sortType == “ascending”:
          For index = 1 to SIZE – 1:
               set unsorted =  names[index]
               set scan = index
               While scan > 0 AND names[scan – 1] > unsorted:
                    Set names[scan] = names[scan-1]
                    Set scan = scan – 1
               End While
               Set names[scan] = unsorted
          End For
     Else If sortType = “descending”:
          For index = 1 to SIZE – 1:
               set unsorted = names[index]
               set scan = index
               While scan > 0 AND names[scan-1] < unsorted:
                    Set names[scan] = names[scan-1]
                    Set scan = scan – 1
               End While
               Set names[scan] = unsorted
          End For
     Display “Would you like to print all now?”
     If input == “yes”:
          printAll()

Module saveData(Integer SIZE, String names[], String addresses[], Integer numbers[]):
     Declare Integer index
     Declare OutputFile addressBook
     Declare String name, address
     Declare Integer number 
     Open addressBook “addressBook.csv”
     For index = 0 to SIZE – 1:
          Set name = names[index]
          Set address = addresses[index]
          Set number = numbers[index]
          Write addressBook name, address, number
     End For
     Close addressBook
